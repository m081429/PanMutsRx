#! /usr/bin/env bash
#trap "exit 100; exit" ERR
####################
## Script Options ##
####################

#set -x

usage ()
{
cat << EOF
######################################################################
##      script to run star
## Script Options:
##      -c      <configfile>      -       (REQUIRED)      required config file
##      -f      <fastqfile>      -       (REQUIRED)      required file with path to fastq(each line should contain <FASTQ1> <FASTQ2>)
##      -r      <rundir>      -       (REQUIRED)      rundir
##      -e      <email>      -       (REQUIRED)      email
##      -i      <runid>      -       (REQUIRED)      runid
##      -h      - Display this usage/help text (No arg)
#############################################################################
EOF
}
echo "Options specified: $@"

while getopts "c:f:r:e:i:h" OPTION; do
    case $OPTION in
        c) config=$OPTARG ;;
		f) fastq=$OPTARG ;;
		r) rundir=$OPTARG ;;
        e) EMAIL=$OPTARG ;;
		i) RUNID=$OPTARG ;;
        h) usage
		exit ;;
    esac
done
shift $((OPTIND-1))

if [ -z "$config" ] || [ -z "$fastq" ] || [ -z "$rundir" ] || [ -z "$EMAIL" ] || [ -z "$RUNID" ]; then
    usage
fi

#loading the config file
source $config
source $WORKFLOW_PATH/shared_functions.sh
if [ -z $SGE_TASK_ID ]
then
	SGE_TASK_ID=1
fi
sampname=`cat $fastq|head -$SGE_TASK_ID|tail -1|sed -e 's/\t/ /g'|cut -d ' ' -f1`
inputfastq1=`cat $fastq|head -$SGE_TASK_ID|tail -1|sed -e 's/\t/ /g'|cut -d ' ' -f2`
inputfastq2=`cat $fastq|head -$SGE_TASK_ID|tail -1|sed -e 's/\t/ /g'|cut -d ' ' -f3`
START=$(date +%s)
mkdir -p $rundir
cd $rundir
mkdir $rundir/$sampname.Starref
cd $rundir/$sampname.Starref
$STAR  --runMode genomeGenerate  --genomeDir $rundir/$sampname.Starref   --genomeFastaFiles $REF_GENOME $STAR_OPTION
check_variable $? $0 $sampname "star step1" $EMAIL $RUNID
mkdir $rundir/$sampname.process_dir/
cd $rundir/$sampname.process_dir/

if [[ $inputfastq1  =~ gz$ ]]
then
	read1="gunzip -c $inputfastq1";
	read2="gunzip -c $inputfastq2";
	$SH -c "$STAR  --genomeDir $rundir/$sampname.Starref --readFilesIn <($read1) <($read2) $STAR_OPTION"
	check_variable $? $0 $sampname "star step2" $EMAIL $RUNID
else
	$STAR --genomeDir $rundir/$sampname.Starref --readFilesIn $inputfastq1 $inputfastq2 $STAR_OPTION
	check_variable $? $0 $sampname "star step2" $EMAIL $RUNID
fi
mkdir $rundir/$sampname.Starref
cd $rundir/$sampname.Starref		
$STAR --runMode genomeGenerate  --genomeDir $rundir/$sampname.Starref   --genomeFastaFiles $REF_GENOME --sjdbFileChrStartEnd $rundir/$sampname.process_dir/SJ.out.tab --sjdbOverhang 75 $STAR_OPTION
check_variable $? $0 $sampname "star step3" $EMAIL $RUNID
mkdir $rundir/$sampname.process_dir_pass2
cd $rundir/$sampname.process_dir_pass2

if [[ $inputfastq1  =~ gz$ ]]
then
	read1="gunzip -c $inputfastq1";
	read2="gunzip -c $inputfastq2";
	$SH -c "$STAR --genomeDir $rundir/$sampname.Starref --readFilesIn <($read1) <($read2) $STAR_OPTION --outSAMunmapped Within"
	check_variable $? $0 $sampname "star step2" $EMAIL $RUNID
else
	$STAR --genomeDir $rundir/$sampname.Starref --readFilesIn $inputfastq1 $inputfastq2 $STAR_OPTION --outSAMunmapped Within
	check_variable $? $0 $sampname "star step2" $EMAIL $RUNID
fi

k3=$rundir/
mkdir -p $rundir
cd $rundir
cat $rundir/$sampname.process_dir_pass2/Aligned.out.sam|$SAMBLASTER $SAMBLASTER_OPTIONS|$SAMTOOLS view -Sbh - > $sampname.bam

if [ $DEBUG != "YES" ] && [ $DEBUG != "yes" ]
then
        rm $rundir/$sampname.Starref/*  $rundir/$sampname.process_dir/* $rundir/$sampname.process_dir_pass2/Aligned.out.sam
		rmdir $rundir/$sampname.Starref/  $rundir/$sampname.process_dir/ 
fi

$JAVA -Djava.io.tmpdir=$k3  $GSNAP_JAVA_OPTION -jar $PICARD AddOrReplaceReadGroups I=$sampname.bam O=$sampname.rg.bam $PICARD_ARG_OPTION TMP_DIR=$k3
check_variable $? $0 $sampname "Picard AddorReplace step" $EMAIL $RUNID
$SAMTOOLS index $sampname.rg.bam
check_variable $? $0 $sampname "samtools index" $EMAIL $RUNID

if [ $DEBUG != "YES" ] && [ $DEBUG != "yes" ]
then
        rm $sampname.bam
fi

$BAMTOOLS split -in $sampname.rg.bam  -reference
check_variable $? $0 $sampname "Bamtools split ref step" $EMAIL $RUNID

if [ $DEBUG != "YES" ] && [ $DEBUG != "yes" ]
then
        rm $sampname.rg.bam
fi

merge=""
remove=""
for i in `ls $sampname.rg.REF_chr*.bam`
do
	if [ $i != "$sampname.rg.REF_unmapped.bam" ]; then
		merge="$merge -in $i"
		remove="$remove $i"
	fi
done
merge="$merge  -out $sampname.merged.bam"
$BAMTOOLS merge $merge
check_variable $? $0 $sampname "Bamtools merge step" $EMAIL $RUNID


if [ $DEBUG != "YES" ] && [ $DEBUG != "yes" ]
then
	rm $remove
fi

$NOVOSORT $NOVOSORT_PARAM --index --tmpdir=$rundir $sampname.merged.bam -o $sampname.gatkin.bam
check_variable $? $0 $sampname "Picard sort step" $EMAIL $RUNID
if [ $DEBUG != "YES" ] && [ $DEBUG != "yes" ]
then
		rm $sampname.merged.bam*
fi

END=$(date +%s)
DIFF=$(( $END - $START ))
echo "star aligner  for $sampname took $DIFF seconds"
